{
  "version": 3,
  "sources": ["../../midi-file/lib/midi-parser.js", "../../midi-file/lib/midi-writer.js", "../../midi-file/index.js"],
  "sourcesContent": ["// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 2 && length != 4) throw \"Expected length for timeSignature event is 4 or 2, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            if (length === 4) {\n              event.metronome = p.readUInt8()\n              event.thirtyseconds = p.readUInt8()\n            } else {\n              event.metronome = 0x24\n              event.thirtyseconds = 0x08\n            }\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n", "// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n", "exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n"],
  "mappings": "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",
  "names": ["event"]
}
